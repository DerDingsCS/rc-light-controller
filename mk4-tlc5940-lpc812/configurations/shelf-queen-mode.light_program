// ----------------------------------------------------------------------------
// Light up the front indicators statically when there is no incoming servo
// signal
//
// If there is no signal for more than five seconds then execute a kind of
// demo mode
// ----------------------------------------------------------------------------
run when no-signal

// Take over all LEDs
use all leds

led main-beam-l = led[4]
led main-beam-r = led[5]
led high-beam-l = led[2]
led high-beam-r = led[3]
led tail-l = led[10]
led tail-r = led[11]
led brake-l = led[8]
led brake-r = led[9]
led indicator-front-l = led[6]
led indicator-front-r = led[7]
led indicator-rear-l = led[15]
led indicator-rear-r = led[14]
led reversing-l = led[12]
led reversing-r = led[13]

var command
var last-command
var new-light-switch-position
var last-light-switch-position
var delay-time
var brake-delay-time
var indicator-direction
var last-indicator-direction


// --------------------------------------------------------------
    delay-time = 5000
initial-loop:
    fade all leds stepsize 0
    all leds = 0%
    indicator-front-l, indicator-front-r = 100%
    sleep 20
    delay-time -= 20
    skip if delay-time <= 0
    goto initial-loop

    all leds = 0%

    // --------------------------------------------------------------
main-loop:
    fade all leds stepsize 0

    // Random command selection
    command = random
    command &= 0x3
    skip if command != last-command
    goto main-loop
    last-command = command

    skip if command != 0
    goto light-switch
    skip if command != 1
    goto indicator
    skip if command != 2
    goto brake
    skip if command != 3
    goto reverse-brake
    goto main-loop

// Switch light switch position to random value
light-switch:
    new-light-switch-position = random
    new-light-switch-position &= 0x3
    skip if new-light-switch-position != last-light-switch-position
    goto light-switch
    last-light-switch-position = new-light-switch-position

    skip if new-light-switch-position != 0
    goto lights-off
    skip if new-light-switch-position != 1
    goto lights-main-beam
    skip if new-light-switch-position != 2
    goto lights-high-beam
    goto light-switch

lights-off:
    main-beam-l, main-beam-r, high-beam-l, high-beam-r, tail-l, tail-r = 0%
    goto lights-wait

lights-main-beam:
    main-beam-l, main-beam-r = 100%
    tail-l, tail-r = 50%
    goto lights-wait

lights-high-beam:
    main-beam-l, main-beam-r, high-beam-l, high-beam-r = 100%
    tail-l, tail-r = 50%
    goto lights-wait

lights-wait:
    delay-time = random
    delay-time &= 0x7ff
    delay-time += 1000
    sleep delay-time
    goto main-loop

// Turn indicator in random direction (or hazard), for a random time
indicator:
    indicator-direction = random
    indicator-direction &= 0x3
    skip if indicator-direction != last-indicator-direction
    goto indicator
    last-indicator-direction = indicator-direction

    // An indicator cycle is 640 ms. We want the indicators on for 2..10s
    // so we create a random value beteen 3 and 16 (* 640 ms)
    delay-time = random
    delay-time &= 0xf
    skip if delay-time < 13
    delay-time -= 13
    delay-time += 3

    skip if indicator-direction != 0
    goto indicator-left
    skip if indicator-direction != 1
    goto indicator-right
    skip if indicator-direction != 2
    goto hazard_active
    goto indicator

indicator-left:
    indicator-front-l, indicator-rear-l = 100%
    sleep 320
    indicator-front-l, indicator-rear-l = 0%
    sleep 320
    delay-time -= 1
    skip if delay-time <= 0
    goto indicator-left
    goto main-loop

indicator-right:
    indicator-front-r, indicator-rear-r = 100%
    sleep 320
    indicator-front-r, indicator-rear-r = 0%
    sleep 320
    delay-time -= 1
    skip if delay-time <= 0
    goto indicator-right
    goto main-loop

hazard_active:
    indicator-front-l, indicator-front-r, indicator-rear-r, indicator-rear-l = 100%
    sleep 320
    indicator-front-l, indicator-front-r, indicator-rear-r, indicator-rear-l = 0%
    sleep 320
    delay-time -= 1
    skip if delay-time <= 0
    goto hazard_active
    goto main-loop


//  Turn brake lights on for a random time
brake:
    brake-l, brake-r, tail-l, tail-r = 100%
    delay-time = random
    delay-time &= 0x1fff
    skip if delay-time < 4000
    delay-time -= 4000
    delay-time += 500
    sleep delay-time
    brake-l, brake-r, tail-l, tail-r = 0%
    skip if new-light-switch-position != 0
    goto main-loop
    tail-l, tail-r = 50%
    goto main-loop


//  Turn reverse on for a random time, then brake for random time
reverse-brake:
    reversing-l, reversing-r = 100%
    delay-time = random
    delay-time &= 0x7ff
    delay-time += 500
    sleep delay-time

    brake-l, brake-r, tail-l, tail-r = 100%
    delay-time = random
    delay-time &= 0x1f
    brake-delay-time = random
    brake-delay-time &= 0x1f

reverse-brake-loop:
    sleep 100
    skip if delay-time != 0
    goto check-brake
    delay-time -= 1
    skip if delay-time == 0
    goto check-brake
    reversing-l, reversing-r = 0%

check-brake:
    skip if brake-delay-time != 0
    goto check-if-done
    brake-delay-time -= 1
    skip if brake-delay-time == 0
    goto check-if-done
    brake-l, brake-r, tail-l, tail-r = 0%
    skip if new-light-switch-position != 0
    goto check-if-done
    tail-l, tail-r = 50%
    ;goto check-if-done

check-if-done:
    skip if delay-time == 0
    goto reverse-brake-loop
    skip if brake-delay-time == 0
    goto reverse-brake-loop
    reversing-l, reversing-r = 0%
    goto lights-wait

end
