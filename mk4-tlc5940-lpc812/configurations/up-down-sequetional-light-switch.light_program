// This light program implements a sequential light switch
// using an up/down button on a transmitter.
//
// This light program requires a 5-channel Pre-Processor.
// It uses AUX2, but any of the AUX channels can be used.
//
// The buttons on the transmitter must have a momentary
// function:
// - When no button is pressed, the servo is in the center
// - While the up button is held, the servo is in position +100
// - While the down button is held, the servo is in position -100

run always

// Threshold for the AUX channel to implement a hysteresis
const THRESHOLD_LEFT = -66
const THRESHOLD_CENTER_LEFT = -33
const THRESHOLD_CENTER_RIGHT = 33
const THRESHOLD_RIGHT = 66

// Internal state variable to track the AUX signal
var state
const STATE_WAIT_FOR_CENTER = 0
const STATE_CENTER = 1


loop:
    // We check the AUX channel every 40ms, the
    // rest of the time the light controller
    // can do other things
    sleep 40

    // Branch to the action reflecting the current
    // state
    if state == STATE_WAIT_FOR_CENTER
    goto wait_for_center
    if state == STATE_CENTER
    goto center

    // We should never reach here; just in case ...
    state = STATE_WAIT_FOR_CENTER
    goto loop

    // Wait for the button to be released (= center).
    // For the AUX to be in center, the servo signal
    // must be between THRESHOLD_CENTER_LEFT and
    // THRESHOLD_CENTER_RIGHT (-33 .. +33)
wait_for_center:
    // If AUX is less than LEFT, the switch is
    // not in the center
    if aux2 < THRESHOLD_CENTER_LEFT
    goto loop
    // If AUX is more than RIGHT, the switch is
    // not in the center
    if aux2 > THRESHOLD_CENTER_RIGHT
    goto loop
    // Between LEFT and RIGHT: switch is in the center!
    state = STATE_CENTER
    goto loop

    // Switch was centered: detect whether the up
    // or down button has been pressed
center:
    // LEFT threshold exceeded: we have a down button press!
    if aux2 < THRESHOLD_LEFT
    goto down
    // RIGHT threshold exceeded: we have an up button press!
    if aux2 > THRESHOLD_RIGHT
    goto up
    goto loop

    // Down button: decrement the light switch position.
    // If the light switch position is 0, then we set it
    // to -1 -- but the light controller checks for that
    // and "fixes" the value back to 0.
down:
    light-switch-position -= 1
    state = STATE_WAIT_FOR_CENTER
    goto loop

    // Up button: increment the light switch position.
    // If the light switch ends up beyond the position
    // defined in the "LED configuration" table, the
    // light controller will "fix" it back to the hightest.
    // used light switch position.
up:
    light-switch-position += 1
    state = STATE_WAIT_FOR_CENTER
    goto loop

end
